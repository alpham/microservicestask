version: "3"
services:
  frontend:
    build: frontend/
    image: microservices/frontend:1.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1.0"
          memory: 100MB
    networks:
      - online_net
    depends_on:
      - api
    ports:
      - ${APP_PORT-8080}:4200
  api:
    volumes:
        - ./api/:/app
    build: api/
    image: microservices/api:1.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1.0"
          memory: 200MB
    networks:
      - online_net
      - internal_net
    volumes:
      - ./__database:/app/__database
    environment:
      DJ_DEBUG: ''
  service_api:
    volumes:
        - ./services/api/:/app
    build: services/api/
    image: microservices/service_api:1.0
    deploy:
      replicas: 1
      restart_policy:
        condition: always
      resources:
        limits:
          cpus: "0.5"
          memory: 10MB
    depends_on:
      - service_cleansing
      - service_scrapper
    environment:
      ENTRYPOINTS: "service_scrapper,service_cleansing"
      SCHEME: "http"
    networks:
      - internal_net
      - hidden_net
  service_scrapper:
    volumes:
      - ./services/scrapper/:/app
    build: services/scrapper/
    image: microservices/service_scrapper:1.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1.0"
          memory: 100MB
    networks:
      - hidden_net
    environment:
      SERVICE_API: "service_api"
      API_SCHEME: "http"
  service_cleansing:
    volumes:
      - ./services/cleansing/:/app
    build: services/cleansing/
    image: microservices/service_cleansing:1.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1.0"
          memory: 500MB
    networks:
      - hidden_net
    environment:
      SERVICE_API: "service_api"
      API_SCHEME: "http"

networks:
  online_net: # responsible for what should be appear to the outside world.
  internal_net: # responsible for communications between api and internal microservices.
  hidden_net: # responsible for communications between services internally.